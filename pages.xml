<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><subtitle type="text">Pages et articles</subtitle><logo>https://xvw.lol/apple-touch-icon.png</logo><link hreflang="fr" href="https://xvw.lol/pages.xml" rel="self"/><generator uri="https://github.com/xhtmlboi/yocaml" version="dev">YOcaml</generator><author><email>xaviervdw@gmail.com</email><uri>https://xvw.lol</uri><name>Xavier Van de Woestyne</name></author><id>https://xvw.lol/pages.xml</id><title type="text">xvw.pages</title><updated>2023-10-31T00:00:00-00:00</updated><entry><summary type="text">Le langage de modules de [OCaml](https://ocaml.org) peut être intimidant, et il implique généralement l'utilisation de beaucoup de mots-clés, par exemple `open` et `include` qui  permettent d'importer des définitions dans un module. Depuis la version `4.08` du langage, la primitive `open` a été _généralisée_ pour permettre l'ouverture **d'expression de module arbitraire**. Dans cet article, nous allons observer comment utiliser cette généralisation pour reproduire une pratique commune dans d'autres langages, que j'appelle, _un peu pompeusement_, des stratégies d'importation, décrivant, par exemple, ce genre de d'importation `import {a, b as c} from K` sans dépendre d'un langage dédié à l'importation.</summary><published>2023-10-31T00:00:00-00:00</published><link hreflang="fr" href="https://xvw.lol/pages/modules-import.html" rel="alternate"/><category term="modules"/><category term="ocaml"/><category term="programmation"/><id>https://xvw.lol/pages/modules-import.html</id><title type="text">OCaml, modules et schémas d'importation</title><updated>2023-10-31T00:00:00-00:00</updated><author><email>xaviervdw@gmail.com</email><uri>https://xvw.lol</uri><name>Xavier Van de Woestyne</name></author></entry><entry><summary type="text">Le _Tetra Master_ est le jeu de cartes facultatif du jeu **Final Fantasy 9**. Son fonctionnement est, en surface, similaire au _Triple Triad_ — le jeu de cartes de Final Fantasy 8 — cependant, même s'il est possible de capturer une intuition générale nous permettant de gagner, pour peu que l'on possède des bonnes cartes, après plus d'une centaine de parties, je dois avouer avoir accepté le fait que, juste en jouant au jeu, et en lisant tous les didacticiels _en jeu_, je fusse incapable d'en comprendre l'ensemble des règles, me poussant à me documenter pour comprendre ce que j'avais raté. L'absence d' **aucune règle** dans le jeu (ou le manuel) m'a exaspéré, me poussant à écrire cet article ...</summary><published>2023-09-05T00:00:00-00:00</published><link hreflang="fr" href="https://xvw.lol/pages/tetra-master.html" rel="alternate"/><category term="jeu-vidéo"/><category term="game-design"/><category term="final-fantasy"/><id>https://xvw.lol/pages/tetra-master.html</id><title type="text">L'enfer du Tetra Master</title><updated>2023-09-05T00:00:00-00:00</updated><author><email>xaviervdw@gmail.com</email><uri>https://xvw.lol</uri><name>Xavier Van de Woestyne</name></author></entry><entry><summary type="text">Cet article est une réinterprétation d'un [article](https://github.com/xvw/planet/blob/master/content/posts/notion-cafe.org) que j'avais rédigé en 2021, sur mon [ancien site](https://github.com/xvw/planet). J'ai essayé d'aller à l'essentiel et il présente, dans les grandes lignes, l'ensemble des pages [Notion](https://www.notion.so/about) mises en place pour me permettre d'indexer ma consommation de café et tenter de construire une intuition sur la compréhension des mes goûts. De manière générale, je pense que se construire une _base de connaissances_ est une bonne pratique quand on tente de découvrir une discipline. Étant loin d'être un expert en café et avec Notion, il est probable qu'une grande partie de ce que je décris dans cet article semble naïf ! Pour résumer, cet article présentera la manière dont j'ai mis en place une infrastructure pour indexer les cafés que je goûte, en vue de me fournir des métriques précises m'aidant à caractériser mes préférences, au moyen de l'outil Notion, tout en présentant quelques techniques et ruses apprises lors de la mise en place de ce système.</summary><published>2023-01-23T00:00:00-00:00</published><link hreflang="fr" href="https://xvw.lol/pages/notion-coffee.html" rel="alternate"/><category term="base de données"/><category term="café"/><category term="notion"/><category term="nocode"/><category term="lowcode"/><id>https://xvw.lol/pages/notion-coffee.html</id><title type="text">Indexation de café avec Notion</title><updated>2023-01-23T00:00:00-00:00</updated><author><email>xaviervdw@gmail.com</email><uri>https://xvw.lol</uri><name>Xavier Van de Woestyne</name></author></entry><entry><summary type="text">Les **méthodes gardées** permettent d'attacher des **contraintes** au receveur (`self`) **uniquement pour certaines méthodes**, permettant donc de n'appeler ces méthodes que si le receveur satisfait ces contraintes (ces _guards_). [OCaml](https://ocaml.org) ne permet pas, syntaxiquement, de définir _directement_ ce genre de méthodes. Dans cette note, nous allons voir comment les encoder en utilisant un **témoin d'égalité de type**.</summary><published>2022-05-29T00:00:00-00:00</published><link hreflang="fr" href="https://xvw.lol/pages/oop-refl.html" rel="alternate"/><category term="gadt"/><category term="ocaml"/><category term="oop"/><category term="type"/><category term="programmation"/><id>https://xvw.lol/pages/oop-refl.html</id><title type="text">Méthodes gardées</title><updated>2022-05-29T00:00:00-00:00</updated><author><email>xaviervdw@gmail.com</email><uri>https://xvw.lol</uri><name>Xavier Van de Woestyne</name></author></entry></feed>