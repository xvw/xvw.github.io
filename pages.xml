<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://xvw.lol/pages.xml</id>
  <title type="text">xvw.pages</title>
  <subtitle type="text">Pages et articles</subtitle>
  <generator uri="https://github.com/xhtmlboi/yocaml" version="2">YOCaml</generator>
  <updated>2024-11-19T00:00:00Z</updated>
  <author>
    <name>xvw, Xavier Van de Woestyne</name>
    <uri>https://xvw.lol</uri>
  </author>
  <entry>
    <id>https://xvw.lol/pages/colophon.html</id>
    <title type="text">Colophon</title>
    <updated>2024-11-19T00:00:00Z</updated>
    <summary type="text">
      Cette page décrit le rôle de ce site web. Elle décrit aussi les différentes ressources et bibliothèques utilisées. Un **Colophon** est, historiquement, en imprimerie, un encadré donnant des informations sur le résultat d&apos;une impression. C&apos;était donc une manière un peu manuelle d&apos;attacher des _méta-données_. Je ne sais pas si c&apos;est un titre de page pertinent, mais il est souvent utilisé, dans la _blogosphère_ (et spécifiquement dans [l&apos;anneau web](https://webring.xxiivv.com/) dont j&apos;ai fait partie pendant plusieures années) pour décrire les différents processus et outils utilisés pour décrire un site web.
    </summary>
    <link href="https://xvw.lol/pages/colophon.html" rel="alternate" title="Colophon"/>
    <category term="misc"/>
    <category term="meta"/>
    <category term="colophon"/>
    <category term="ocaml"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/emacs-yasnippet.html</id>
    <title type="text">Expansion d&apos;abréviations avec YASnippet</title>
    <updated>2024-09-25T00:00:00Z</updated>
    <summary type="text">
      Quand on programme (ou que l&apos;on rédige), il est assez courant de devoir saisir des séquences récurrentes (du _boilerplate_). C&apos;est probablement plus observable quand on écrit de code, où certaines constructions du langages, disposant de niveau d&apos;expressivité différents, doivent être répétées très régulièrement. Dans cet article, je vous propose de découvrir [YASnippet](https://github.com/joaotavora/yasnippet) (pour _**Y**et **A**n other **S**nippet extension_), un système de _template_ pour Emacs, permettant l&apos;expansion d&apos;abréviations, de manière structurée.
    </summary>
    <link href="https://xvw.lol/pages/emacs-yasnippet.html" rel="alternate" title="Expansion d&apos;abr\195\169viations avec YASnippet"/>
    <category term="programmation"/>
    <category term="emacs"/>
    <category term="yas"/>
    <category term="snippet"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/why-ocaml.html</id>
    <title type="text">Sur le choix d&apos;OCaml</title>
    <updated>2024-08-25T00:00:00Z</updated>
    <summary type="text">
      J&apos;ai commencé à utiliser régulièrement le langage [OCaml](https://ocaml.org) vers 2012, et depuis, mon intérêt et mon engouement pour ce langage n&apos;ont cessé de croître. Il est devenu mon choix de prédilection pour presque tous mes projets personnels, influençant également mes choix professionnels.
Depuis 2014, je participe activement aux conférences grand public dédiées à la programmation et à la construction de logiciels, où j&apos;exprime souvent mon enthousiasme pour OCaml de manière parfois excessive (mais toujours passionnée). Cela m&apos;a valu, de manière amicale, le surnom _d&apos;évangéliste d&apos;OCaml_, une appellation qui, je l&apos;avoue, me flatte énormément.
Convaincu que mon intérêt pour OCaml est justifié, je prends souvent plaisir à énumérer les nombreux avantages de cette technologie. J&apos;ai donc décidé de coucher par écrit les raisons pour lesquelles je considère OCaml comme un excellent choix pour divers types de projets. Cette page me permettra de partager facilement mes arguments et d&apos;expliquer pourquoi OCaml mérite attention et intérêt.
De plus, je ne suis pas seul à penser cela. Malgré l&apos;idée reçue que OCaml ne serait pas un choix pragmatique pour l&apos;industrie, de grandes entreprises telles que [Meta](https://engineering.fb.com/?s=ocaml), [Microsoft](https://www.microsoft.com/en-us/research/project/slam/?from=https://research.microsoft.com/en-us/projects/slam/&amp;type=exact), [Ahref](https://tech.ahrefs.com/tagged/ocaml), [Tarides](https://tarides.com), [OCamlPro](https://ocamlpro.com/), [Bloomberg](https://www.bloomberg.com/company?s=ocaml), [Docker](https://github.com/moby/vpnkit), [Janestreet](https://www.janestreet.com/technology/), [Citrix](https://xapi-project.github.io/), [Tezos](https://tezos.com), et [bien d&apos;autres](https://ocaml.org/industrial-users) l&apos;utilisent activement.
    </summary>
    <link href="https://xvw.lol/pages/why-ocaml.html" rel="alternate" title="Sur le choix d&apos;OCaml"/>
    <category term="programmation"/>
    <category term="ocaml"/>
    <category term="opinion"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/ocaml-merlin-destruct.html</id>
    <title type="text">Effective ML, au travers de la commande &apos;destruct&apos;</title>
    <updated>2024-06-03T00:00:00Z</updated>
    <summary type="text">
      Cet article est une réinterprétation francophone d&apos;un article publié [le blog de Tarides](https://tarides.com/blog/2024-05-29-effective-ml-through-merlin-s-destruct-command/), en Anglais, qui présente l&apos;utilisation de la commande `destruct` pour générer des motifs manquants dans du filtrage par motif.
    </summary>
    <link href="https://xvw.lol/pages/ocaml-merlin-destruct.html" rel="alternate" title="Effective ML, au travers de la commande &apos;destruct&apos;"/>
    <category term="programmation"/>
    <category term="emacs"/>
    <category term="ocaml"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/emacs-occurs-long-line.html</id>
    <title type="text">Lister les lignes trop longues (via Occur)</title>
    <updated>2024-04-09T00:00:00Z</updated>
    <summary type="text">
      Une petite astuce qui explique comment utiliser [occur](https://www.emacswiki.org/emacs/OccurMode) et [l&apos;argument universel](https://www.gnu.org/software/emacs/manual/html_node/emacs/Arguments.html) pour énumérer, dans un _buffer_, l&apos;ensemble des lignes qui dépassent un nombre donné de caractères.
    </summary>
    <link href="https://xvw.lol/pages/emacs-occurs-long-line.html" rel="alternate" title="Lister les lignes trop longues (via Occur)"/>
    <category term="programmation"/>
    <category term="emacs"/>
    <category term="occur"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/notion-coffee.html</id>
    <title type="text">Indexation de café avec Notion</title>
    <updated>2024-03-12T00:00:00Z</updated>
    <summary type="text">
      Cet article est une réinterprétation d&apos;un [article](https://github.com/xvw/planet/blob/master/content/posts/notion-cafe.org) que j&apos;avais rédigé en 2021, sur mon [ancien site](https://github.com/xvw/planet). J&apos;ai essayé d&apos;aller à l&apos;essentiel et il présente, dans les grandes lignes, l&apos;ensemble des pages [Notion](https://www.notion.so/about) mises en place pour me permettre d&apos;indexer ma consommation de café et tenter de construire une intuition sur la compréhension des mes goûts. De manière générale, je pense que se construire une _base de connaissances_ est une bonne pratique quand on tente de découvrir une discipline. Étant loin d&apos;être un expert en café et avec Notion, il est probable qu&apos;une grande partie de ce que je décris dans cet article semble naïf ! Pour résumer, cet article présentera la manière dont j&apos;ai mis en place une infrastructure pour indexer les cafés que je goûte, en vue de me fournir des métriques précises m&apos;aidant à caractériser mes préférences, au moyen de l&apos;outil Notion, tout en présentant quelques techniques et ruses apprises lors de la mise en place de ce système.
    </summary>
    <link href="https://xvw.lol/pages/notion-coffee.html" rel="alternate" title="Indexation de caf\195\169 avec Notion"/>
    <category term="low-code"/>
    <category term="notion"/>
    <category term="cafe"/>
    <category term="bdd"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/modules-import.html</id>
    <title type="text">OCaml, modules et schémas d&apos;importation</title>
    <updated>2023-10-31T00:00:00Z</updated>
    <summary type="text">
      Le langage de modules de [OCaml](https://ocaml.org) peut être intimidant, et il implique généralement l&apos;utilisation de beaucoup de mots-clés, par exemple `open` et `include` qui  permettent d&apos;importer des définitions dans un module. Depuis la version `4.08` du langage, la primitive `open` a été _généralisée_ pour permettre l&apos;ouverture **d&apos;expression de module arbitraire**. Dans cet article, nous allons observer comment utiliser cette généralisation pour reproduire une pratique commune dans d&apos;autres langages, que j&apos;appelle, _un peu pompeusement_, des stratégies d&apos;importation, décrivant, par exemple, ce genre de d&apos;importation `import {a, b as c} from K` sans dépendre d&apos;un langage dédié à l&apos;importation.
    </summary>
    <link href="https://xvw.lol/pages/modules-import.html" rel="alternate" title="OCaml, modules et sch\195\169mas d&apos;importation"/>
    <category term="programmation"/>
    <category term="ocaml"/>
    <category term="modules"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/tetra-master.html</id>
    <title type="text">L&apos;enfer du Tetra Master</title>
    <updated>2023-09-05T00:00:00Z</updated>
    <summary type="text">
      Le _Tetra Master_ est le jeu de cartes facultatif du jeu **Final Fantasy 9**. Son fonctionnement est, en surface, similaire au _Triple Triad_ — le jeu de cartes de Final Fantasy 8 — cependant, même s&apos;il est possible de capturer une intuition générale nous permettant de gagner, pour peu que l&apos;on possède des bonnes cartes, après plus d&apos;une centaine de parties, je dois avouer avoir accepté le fait que, juste en jouant au jeu, et en lisant tous les didacticiels _en jeu_, je fusse incapable d&apos;en comprendre l&apos;ensemble des règles, me poussant à me documenter pour comprendre ce que j&apos;avais raté. L&apos;absence d&apos; **aucune règle** dans le jeu (ou le manuel) m&apos;a exaspéré, me poussant à écrire cet article ...
    </summary>
    <link href="https://xvw.lol/pages/tetra-master.html" rel="alternate" title="L&apos;enfer du Tetra Master"/>
    <category term="final-fantasy"/>
    <category term="game-design"/>
    <category term="jeu-video"/>
    <category term="ocaml"/>
  </entry>
  <entry>
    <id>https://xvw.lol/pages/oop-refl.html</id>
    <title type="text">Méthodes gardées en OCaml</title>
    <updated>2022-05-29T00:00:00Z</updated>
    <summary type="text">
      Les **méthodes gardées** permettent d&apos;attacher des **contraintes** au receveur (`self`) **uniquement pour certaines méthodes**, permettant donc de n&apos;appeler ces méthodes que si le receveur satisfait ces contraintes (ces _guards_). [OCaml](https://ocaml.org) ne permet pas, syntaxiquement, de définir _directement_ ce genre de méthodes. Dans cette note, nous allons voir comment les encoder en utilisant un **témoin d&apos;égalité de type**.
    </summary>
    <link href="https://xvw.lol/pages/oop-refl.html" rel="alternate" title="M\195\169thodes gard\195\169es en OCaml"/>
    <category term="programmation"/>
    <category term="type"/>
    <category term="oop"/>
    <category term="ocaml"/>
    <category term="gadt"/>
  </entry>
</feed>